## Mybatis（优秀的持久层框架）



### 1.持久化

**数据持久化**

+ **持久化就是将查询的数据在持久状态和瞬时状态转化的过程**

+ 内存： **断电丢失**
+ **数据库**（**jdbc**），**io******文件持久化****
+ **数据持久化就是将[内存](https://so.csdn.net/so/search?q=内存&spm=1001.2101.3001.7020)中的数据模型转换为存储模型,以及将存储模型转换为内存中的数据模型的统称.。**





#### **狭义的理解**: “持久化”**仅仅指把域对象永久保存到数据库中**；



### **广义的理解,“持久化”包括和数据库相关的各种操作。数据持久化对象的基本操作有：保存、更新、删除、加载、查询等。**





## 1.2 持久层

+ 完成持久化工作的代码块
+ 层界明显



## 1.3 为什么需要Mybatis

+ 方便
+ 将数据存入数据库中 
+ 传统的JDBC代码太复杂
+ 简化 ，框架，自动化



## 2 搭建环境



### 2.1 搭建数据库

**手动写SQL**

创建数据库

```sql
CREATE DATABASE `mybatis`;

USE `mybatis`;
```



创建表

```sql
CREATE TABLE `user`(
	`id` INT(20) NOT NULL PRIMARY KEY,
	`name` VARCHAR(30) DEFAULT NULL,
	`pwd` VARCHAR(30) default NULL
)ENGINE=INNODB DEFAULT CHARSET=utf8;
```



插入数据

```sql
INSERT INTO `user`(`id`,`name`,`pwd`)VALUES
(1,'YN1','123'),
(2,'YN2','123'),
(3,'YN3','123')
```





### 2.2新建项目

创建maven项目

然后导入maven依赖

```maven
    <dependencies>
<!--        mysql驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.29</version>
        </dependency>
<!--        mybatis驱动-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.2</version>
        </dependency>
<!--            junit 驱动-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

    </dependencies>	
```



### 2.3创建模块



mybatis核心配置文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis?useSSl=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>
            </dataSource>
        </environment>
    </environments>
    
<!--    每一个Mapper.xml都需要在Mybais核心配置文件注册-->
    <mappers>
        <mapper resource="com.yn.dao.UserMapper.xml"/>
    </mappers>
</configuration>
```

​        **<property name="url" value="jdbc:mysql://localhost:3306/mybatis?useSSl=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8"**

**重要**



编写mybatis工具类

![image-20221001131647695](C:\Users\yn\AppData\Roaming\Typora\typora-user-images\image-20221001131647695.png)

创建utils层 再写工具类

```java
package com.yn.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

//SqlSessionFactory-->sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;

    static {
        try {
            // 第一步 使用Mybatis获取sqlSessionFactory对象
            String resource = "mybatis-config.xml";
            InputStream inputStream = Resources.getResourceAsStream(resource);
           sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。
    // SqlSession 提供了在数据库执行 SQL
    // 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。例如：

    public static SqlSession getSqlSession(){
        SqlSession sqlSession = sqlSessionFactory.openSession();
        return sqlSession;
    }
}
```



### 2.4编写代码

+ 实体类

+ Dao接口

+ 接口实现类

+ .

  #### 实体类

  ![image-20221001131848263](C:\Users\yn\AppData\Roaming\Typora\typora-user-images\image-20221001131848263.png)

```java
package com.yn.pojo;
//实体类
public class User {
    private int id;
    private String name;
    private String pwd;

    public User() {
    }

    public User(int id, String name, String pwd) {
        this.id = id;
        this.name = name;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
}

```



#### Dao 接口（相当于是mapper）用来操作实体类

![image-20221001132749191](C:\Users\yn\AppData\Roaming\Typora\typora-user-images\image-20221001132749191.png)

```java
package com.yn.dao;

import com.yn.pojo.User;

import java.util.List;

public interface UserDao {
    List<User> getUserList();

}

```



+ 接口实现类由原来的的UserDaoimpl转变为一个Mapper配置文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 绑定一个对应的Dao/Mapper接口-->
<mapper namespace="com.yn.dao.UserDao">
<!--select 查询语句-->
<!--    id对应UserDao里面的方法 -->
    <select id="getUserList" resultType="com.yn.pojo.User">
        select * from mybatis.user

    </select>


</mapper>
```





## 注意maven里面约定大于配置 有些资源不生效 不起作用 需要资源过滤

在maven里面添加配置项

```java
    <build>
        <resources>
            <resource>
            <directory>src/main/resources</directory>
            <includes>
                <include>**/*.properties</include>
                <include>**/*.xml</include>
            </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>

        </resources>
    </build>
```





### 2.5 测试

junit测试


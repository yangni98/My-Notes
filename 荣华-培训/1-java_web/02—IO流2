[TOC]





# IO流

用于读取文件中的数据（可以读写文件，或者网络中的数据等等）

写 output

读 input

### 1.IO流的分类

#### 按照流的方向分类：

输出流（写出）

输入流（读取）



#### 操作文件的类型分类

字节流（可以操作所有类型文件）

抽象类为：inputStream，OutputStream

字符流（操作纯文本文件）

抽象类为：Reader 和 Writer





### 2.FileOut/InputStream(字节流的输入输出)

操作本地文件的字节输出流，可以把程序中的数据写到本地文件中

步骤：1.创建对象

​			2.写出数据

​			3.释放资源

```java
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class _01io流 {
    public static void main(String[] args) throws IOException {
        FileOutputStream fos =new FileOutputStream("D:\\porject\\Servlet\\Java基础\\_02io流\\a.txt");
        fos.write(99);//写
        fos.close();//关闭
    }
}
```

创建字节输出流对象时: 

参数是字符串表示路径或者是File对象都是可以的

如果文件不存在会创建一个新的文件,但是要保证父级目录存在

如果文件已经存在,则会清空之前文件(覆盖)



写数据时:

write方法的参数是整数,实际上是写到本地文件中的是整个ASCALL文件吧



##### FileOutputStream写数据的3种方式

void write（int b)		一次写一个字节数据

void write（byte[ ] b) 	一次写一个字节数组数据

void write(byte[ ] b,int off,int len) 	一次写一个字节数组的部分数据

```java
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class _02io流_File流的三种方式 {
    public static void main(String[] args) throws IOException {

        File file1 = new File("D:\\porject\\Servlet\\Java基础\\_02io流\\a.txt");
        FileOutputStream fos = new FileOutputStream(file1);
        // 第一种
        fos.write(98);//b
        //第二种
        byte[] bytes={97,98,99,100,101,102};
        fos.write(bytes);
        //d第三种
        fos.write(bytes,3,2);
        fos.close();
    }
}
```



##### FileOutputStream写数据的两个小问题

1. 换行写

​	Windows系统 换行符  \r\n

​	Linux:			\n

​	Mac:  			\r

在Windows操作系统当中，java对回车换行进行优化，

虽然完整的是\r\n 但是 只写\r 或者\n java也可以实现换行，

因为java在底层会补全

```java
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class _03io流 {
    public static void main(String[] args) throws IOException {

        //1.创建文件对象
        File file = new File("D:\\porject\\Servlet" +
                "\\Java基础\\_02io流\\a.txt");

        //2.创建流对象
        FileOutputStream fos = new FileOutputStream(file);

        //3.创建要写的字符串
        String str1="mnbvcx";
        String str2="666";
        //换行写
        fos.write(str1.getBytes());
        fos.write("\r".getBytes());//写换行符
        fos.write(str2.getBytes());
        //释放资源
        fos.close();
    }
}
```



2.续写

```java
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class _03io流 {
    public static void main(String[] args) throws IOException {

        //1.创建文件对象
        File file = new File("D:\\porject\\Servlet" +
                "\\Java基础\\_02io流\\a.txt");

        //2.创建流对象
        FileOutputStream fos = new FileOutputStream(file,true);

        //3.创建要写的字符串
        String str1="mnbvcx";
        String str2="666";
        //换行写
        fos.write(str1.getBytes());
        fos.write("\r".getBytes());//写换行符
        fos.write(str2.getBytes());
        //释放资源
        fos.close();
    }
}
```

        //2.创建流对象
        FileOutputStream fos = new FileOutputStream(file,true);



#### FileInputStream使用

```java
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class _04io的FieInputStream {
    public static void main(String[] args) throws IOException {

        //创建文件对象
        File file = new File("D:\\porject\\Servlet" +
                "\\Java基础\\_02io流\\a.txt");

        //创建InputStream
        FileInputStream fis = new FileInputStream(file);
        //读文件
        int a=fis.read();
        System.out.println(a);
        //释放资源
        fis.close();
    }
}
```

只读取一个

想读取全部需要循环

```java
int a=fis.read();
System.out.println((char) a);
```

想要读取到的是m，而不是数字，强转一下就行

，读不到了就会返回-1 

注意：

找不到文件直接报错

一次读一个字节，读取来的就是数据ASCLL上对应的数字

读取文件末尾了，read方法返回-1、



#### 循环读取数据

```java
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class _05io流循环读取 {
    public static void main(String[] args) throws IOException {
        //w文件
        File file = new File("D:\\porject\\Servlet\\" +
                "Java基础\\_02io流\\a.txt");

        FileInputStream fis = new FileInputStream(file);

        int a ;
        while((a=fis.read())!=-1){
            System.out.println((char) a);
        }
        fis.close();
}
}
```





##### 字节流的复制拷贝

拷贝一个小的文件

```java
import java.io.*;

public class _06io流的文件拷贝 {
    public static void main(String[] args) throws IOException {
        // 拷贝文件"D:\笔记\笔记3-5月开始\03ThreadLocal01.md"到桌面

        // 创建文件对象
        File file = new File("D:\\笔记\\笔记3-5月开始\\03ThreadLocal01.md");
        //读取文件
        FileInputStream fis = new FileInputStream(file);
        // 写文件
        FileOutputStream fos = new FileOutputStream("D:\\porject\\Servlet\\Java基础\\_02io流\\src\\ThreadLocal.md");

        //拷贝
//        核心实现：边读边写
        int a;
        while ((a=fis.read())!=-1){
            fos.write(a);
        }
//       关闭
        fos.close();
        fis.close();
    }
}
```



文件拷贝 时文件过大时 这样读取会非常慢

一次读一个字节数组的数据，每次读取会尽可能把数组装满

一般都是1024的整数倍

1024*1024 * 5  这是5M的速度

```java
import java.io.*;
import java.util.Date;

public class _07io流的大文件读取 {
    public static void main(String[] args) throws IOException {
        // 拷贝文件"D:\笔记\笔记3-5月开始\03ThreadLocal01.md"到桌面

        // 创建文件对象
        File file = new File("D:\\笔记\\笔记3-5月开始\\03ThreadLocal01.md");

        byte[] bytes3 = new byte[3];//一次读取3字节

        //读取文件
        FileInputStream fis = new FileInputStream(file);
        // 写文件
        FileOutputStream fos = new FileOutputStream("D:\\porject\\Servlet\\Java基础\\_02io流\\src\\ThreadLocal2.md");
        Date date1 = new Date();
        System.out.println();
        //拷贝
//        核心实现：边读边写
        int a;
        while ((a=fis.read(bytes3))!=-1){
            fos.write(bytes3,0,a);
        }
        Date date2 = new Date();
        long l = date2.getTime() - date1.getTime();
        System.out.println("耗时："+l);
//       关闭
        fos.close();
        fis.close();
    }
}
```

核心

        int a;
        while ((a=fis.read(bytes3))!=-1){
            fos.write(bytes3,0,a);
        }



#### 字符输入流

字符流=字节流+字符集

特点：

​	输入流：一次读一个字节，遇到中文时，一次读多个字节

​	输出流：底层会把数据按照指定的编码方式进行编码，变成字节再写到文件中



使用场景：

​	对于纯文本场景使用字符流



字符流的抽象类

Reader：字符输入流-————》FileReader

Writer：字符输出流—————》FileWriter

```java
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class _08io流字符流 {
    public static void main(String[] args) throws IOException {
        //创建文件对象
        File file = new File("D:\\porject\\Servlet\\Java基础\\_02io流\\b.txt");

        //字符流输入流
        FileReader fr = new FileReader(file);
        int ch;
        while ((ch= fr.read())!=-1){
            System.out.print((char)ch);
        }
        //3.关闭流
        fr.close();
    }
}
```



有参的Reader方法

```java
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class _09io流字符流_带参 {
    public static void main(String[] args) throws IOException {
        //创建文件对象
        File file = new File("D:\\porject\\Servlet\\Java基础\\_02io流\\b.txt");

        //字符流输入流
        FileReader fr = new FileReader(file);
        char[] chars = new char[2];


        int ch;
        while ((ch= fr.read(chars))!=-1){
            System.out.print(new String(chars,0,ch));
        }
        //3.关闭流
        fr.close();
    }
}
```



创建字符输流对象

​	底层： 关联文件夹，并创建缓冲区；

读取数据

​	底层： 1.判断缓冲区中是否有数据可以读取

​				2.缓冲区没有数据：从文件中获取数据，装到缓冲区里面去，每次尽可能装满缓冲区

​												如果文件中也没有数据了 ，返回-1

​				3.缓冲区有数据： 就从缓冲区中读取

​								空参的read方法：一次读取一个字节，遇到中文一次读多个字节，把字节解码并转成十进制返回





#### 拷贝文件夹

```java
import java.io.*;

public class _11io流_拷贝文件夹 {
    public static void main(String[] args) throws IOException {
        //拷贝一个文件夹，考虑子文件夹

        //1.创建对象表示数据源
        File file1 = new File("D:\\test");
        File file2 = new File("D:\\test2");//创建需要拷贝到的地点

        copdir(file1,file2);
    }

    private static void copdir(File file1, File file2) throws IOException {
        file2.mkdirs();
        //递归
        //1.进入数据源
        File[] files = file1.listFiles();
        //遍历数组
        for (File file:files){
            if (file.isFile()){//判断文件,拷贝
                //
                FileInputStream fis = new FileInputStream(file);//要拷贝的文件
                FileOutputStream fos = new FileOutputStream(new File(file2,file.getName()));//目的地文件
                byte[] bytes = new byte[1024];
                int len;
                while ((len=fis.read(bytes))!=-1){
                    fos.write(bytes,0,len);
                }
                fos.close();
                fis.close();
            }else {
            //如果是文件夹 ,递归
                copdir(file,new File(file2,file.getName()));
            }
        }
    }
}
```



#### 字符缓冲流

```java
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class _12io流字符缓冲流 {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader1 = new BufferedReader(new FileReader("D:\\porject\\Servlet\\Java基础\\_02io流\\b.txt"));

        String readLine = bufferedReader1.readLine();

        System.out.println(readLine);

        bufferedReader1.close();

    }
}
```

```java

```



字节缓冲流自带长度为8k的缓冲区

字符缓冲流自带长度为16的缓冲区



